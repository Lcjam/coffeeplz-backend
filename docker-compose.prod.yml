version: '3.8'

services:
  mysql-prod:
    image: mysql:8.0
    container_name: coffeeplz-mysql-prod
    environment:
      MYSQL_DATABASE: ${DB_NAME:-coffeeplz}
      MYSQL_USER: ${DB_USERNAME:-coffeeplz}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./mysql-conf:/etc/mysql/conf.d
    networks:
      - coffeeplz-prod-network
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: always
    security_opt:
      - no-new-privileges:true

  app-prod:
    image: ${DOCKER_REGISTRY:-localhost}/coffeeplz:${IMAGE_TAG:-latest}
    container_name: coffeeplz-app-prod
    depends_on:
      - mysql-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: mysql-prod
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-coffeeplz}
      DB_USERNAME: ${DB_USERNAME:-coffeeplz}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SWAGGER_ENABLED: ${SWAGGER_ENABLED:-false}
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC"
    ports:
      - "80:8080"
    volumes:
      - ./logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    networks:
      - coffeeplz-prod-network
    restart: always
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: coffeeplz-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app-prod
    networks:
      - coffeeplz-prod-network
    restart: always

  # Redis for production caching
  redis-prod:
    image: redis:7-alpine
    container_name: coffeeplz-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - coffeeplz-prod-network
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf

  # Log aggregation (ELK Stack - optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: coffeeplz-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - coffeeplz-prod-network
    restart: always

volumes:
  mysql_prod_data:
  redis_prod_data:
  elasticsearch_data:

networks:
  coffeeplz-prod-network:
    driver: bridge 